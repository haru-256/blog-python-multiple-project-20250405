name: Python Lint and Test

on:
  pull_request:
    paths:
      - "**/*.py"
  push:
    branches:
      - "main"
    paths:
      - "**/*.py"
  workflow_dispatch:
    inputs:
      target_projects:
        description: "Projects to run lint and test on"
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  target_projects:
    name: Find target Projects
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.get-projects.outputs.projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed directories
        id: changed-files
        uses: tj-actions/changed-files@6cb76d07bee4c9772c6882c06c37837bf82a04d3 # v46
        with:
          matrix: true # 後続のjobでmatrixで使うために。ファイルがjson形式で出力される
          dir_names: true # uniqueディレクトリ名を取得
          dir_names_max_depth: 1 # ディレクトリ名の深さを指定
          files_ignore: |
            .github/**
      - name: Get Python projects
        uses: actions/github-script@v7
        id: get-projects
        with:
          script: |
            const fs = require('node:fs');
            // If target_projects input is provided, use it
            dispatch_inputs = "${{ github.event.inputs.target_projects }}";
            if (dispatch_inputs !== "") {
              dispatch_inputs = dispatch_inputs.split(',').map(path => path.trim());
              core.setOutput('projects', JSON.stringify(dispatch_inputs));
            } else { // If no input is provided, get directories from changed files
              const inputs = JSON.parse(${{ toJSON(steps.changed-files.outputs.all_changed_and_modified_files) }});
              // Filter out directories that contain pyproject.toml and Makefile
              const paths = inputs.filter(path => {
                if (
                  fs.statSync(path).isDirectory()
                  && fs.existsSync(`${path}/pyproject.toml`)
                  && fs.existsSync(`${path}/Makefile`)
                ) {
                  return true;
                }
                return false;
              });
              core.setOutput('projects', JSON.stringify(paths));
            }
      - name: Print changed directories
        run: |
          echo "Changed directories: ${{ steps.get-projects.outputs.projects }}"
          echo "::debug::Changed directories: ${{ steps.get-projects.outputs.projects }}"

  python-lint-and-test:
    name: Python Lint and Test
    needs: target_projects
    if: ${{ needs.target_projects.outputs.projects != '' && toJson(fromJson(needs.target_projects.outputs.projects)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.target_projects.outputs.projects) }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.project }}
      cancel-in-progress: true
    defaults:
      run:
        working-directory: ${{ matrix.project }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "${{ matrix.project }}/uv.lock"
      - name: Install the project
        run: make install
      - name: Lint
        run: make lint
      - name: Test
        run: make test
