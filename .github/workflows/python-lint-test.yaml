name: Python Lint and Test

on:
  pull_request:
    paths:
      - "**/*.py"
  push:
    branches:
      - "main"
    paths:
      - "**/*.py"
  workflow_dispatch:
    inputs:
      target_projects:
        description: "Projects to run lint and test on"
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed_files:
    name: Find changed files
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      target_project: ${{ steps.changes.outputs.target_projects }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed directories
        id: changed-files
        uses: tj-actions/changed-files@6cb76d07bee4c9772c6882c06c37837bf82a04d3 # v46
        with:
          matrix: true # 後続のjobでmatrixで使うために。ファイルがjson形式で出力される
          dir_names: true # uniqueディレクトリ名を取得
          dir_names_max_depth: 1 # ディレクトリ名の深さを指定
          files_ignore: |
            .github/**
      - name: Debug changed files
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}"
          echo "::debug::Changed files: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}"
      - name: Get Python projects
        uses: actions/github-script@v7
        id: changes
        with:
          script: |
            const fs = require('node:fs');
            // If target_projects input is provided, use it
            dispatch_inputs = JSON.parse(${{ toJSON(steps.changed-files.outputs.all_changed_and_modified_files) }});
            if (dispatch_inputs) {
              // TODO: validate the input
              core.setOutput('target_projects', dispatch_inputs);
            } else { // If no input is provided, get directories from changed files
              const inputs = JSON.parse(${{ toJSON(steps.changed-files.outputs.all_changed_and_modified_files) }});
              // Filter out directories that contain pyproject.toml and Makefile
              const paths = inputs.filter(path => {
                if (
                  fs.statSync(path).isDirectory()
                  && fs.existsSync(`${path}/pyproject.toml`)
                  && fs.existsSync(`${path}/Makefile`)
                ) {
                  return true;
                }
                return false;
              });
              core.setOutput('target_projects', JSON.stringify(paths));
            }
      - name: Print changed directories
        run: |
          echo "Changed directories: ${{ steps.changes.outputs.target_projects }}"
          echo "::debug::Changed directories: ${{ steps.changes.outputs.target_projects }}"

  # python-lint-and-test:
  #   needs: changed_files
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Get changed directories
  #       id: changes
  #       run: |
  #         # Check if the target_dir input is provided
  #         if [ -n "${{ github.event.inputs.target_dir }}" ]; then
  #           echo "wd=${{ github.event.inputs.target_dir }}" >> $GITHUB_OUTPUT
  #           echo "should_run=true" >> $GITHUB_OUTPUT
  #           exit 0
  #         fi

  #         # Get unique directories from changed files
  #         if [ "${{ github.event_name }}" == "pull_request" ]; then
  #           # For PRs, compare with base branch
  #           git fetch origin ${{ github.base_ref }}
  #           CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep '\.py$' || echo "")
  #         else
  #           # For pushes, compare with previous commit
  #           CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '\.py$' || echo "")
  #         fi
  #         echo "::debug::Changed files: $CHANGED_FILES"

  #         # If no Python files changed, skip tests
  #         if [ -z "$CHANGED_FILES" ]; then
  #           echo "No Python files changed"
  #           echo "should_run=false" >> $GITHUB_OUTPUT
  #           exit 0
  #         fi
  #         CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk -F/ '{print $1}' | sort -u)
  #         echo "Changed directories: $CHANGED_DIRS"

  #         # Count how many directories were changed
  #         DIR_COUNT=$(echo "$CHANGED_DIRS" | grep -v "^$" | wc -l)

  #         if [ "$DIR_COUNT" -eq 0 ]; then
  #           echo "No Python directories changed"
  #           echo "should_run=false" >> $GITHUB_OUTPUT
  #           exit 0
  #         elif [ "$DIR_COUNT" -gt 1 ]; then
  #           echo "::error::Changes detected in multiple directories: $CHANGED_DIRS"
  #           echo "This workflow supports changes in only one directory at a time"
  #           exit 1
  #         fi

  #         # Set the single directory as output
  #         echo "wd=$(echo "$CHANGED_DIRS" | tr -d '\n')" >> $GITHUB_OUTPUT
  #         echo "should_run=true" >> $GITHUB_OUTPUT
  #     - name: Install uv
  #       if: ${{ steps.changes.outputs.should_run }} == 'true'
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         enable-cache: true
  #     - name: Install the project
  #       if: ${{ steps.changes.outputs.should_run }} == 'true'
  #       run: make install
  #       working-directory: ${{ steps.changes.outputs.wd }}
  #     - name: Lint
  #       if: ${{ steps.changes.outputs.should_run }} == 'true'
  #       run: make lint
  #       working-directory: ${{ steps.changes.outputs.wd }}
  #     - name: Test
  #       if: ${{ steps.changes.outputs.should_run }} == 'true'
  #       run: make test
  #       working-directory: ${{ steps.changes.outputs.wd }}
